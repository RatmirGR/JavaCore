/* области действия - блоки*/
class NameClass{ // блок класса

    {} // блок инициализации

    NameClass(){} // блок конструктора

    void method() { // блок метода

        if(true){} // блок выбора

        {} // вложенный блок инициализации
    }
}

/* Переменные*/
public class Variables {
    /* 1) объявление переменной*/
    byte a;
    short b;

    /* объявление и инициализация переменной*/
    int c = 34;

    /* объявление нескольких переменных и инициализация одного из них*/
    long d, e = 47, f;

    /* объявление и инициализация константы*/
    char CONSTANT = 34;

    int g;
    /* динамическая инициализация переменной другой переменной*/
    int h = g;

    void exampleMethodV1(){
        /* инициализация переменной*/
        a = 47;
    }

    /*---------------------------------------------------------------------*/

    /* 2) область действия переменных*/

    /* объявление переменной класса*/
    byte variableClass;

    void exampleMethodV2(){
        /* инициализация переменной класса*/
        variableClass = 34;

        /* объявление локальной переменная*/
        int localVariable;
        localVariable = 47; /* инициализация локальной переменной*/
    }

    void exampleMethodV2a(){
        variableClass = 52;
        //localVariable = 74; // ошибка, локальная переменная не видна вне ее блока, в котором она объявлена

        int localVariable1 = 34;
        {
            /* нельзя использовать такое же имя, при объявленни переменной во вложенном блоке*/
            //int localVariable1 = 47; // ошибка
        }
    }

    /*---------------------------------------------------------------------*/

    /* 3) динамическая инициализация*/

    void exampleMethod3(){

        int i = 0;
        /* динамическая инициализация переменной другой переменной*/
        int j = i;

        /* динамическая инициализация переменной значением, возвращаемый методом*/
        String str = getString();
    }

    String getString(){
        return "text";
    }

    /*---------------------------------------------------------------------*/

    /* 4) преобразование и приведение типов*/

    void exampleMethod4(){
        byte b = 1;
        short s = 2;
        int i = 3;
        long l = 4;
        char c = 5;
        float f = 6.0f;
        double d = 7.0;

        /* автоматическое преобразование типов*/
        s = b; // значение переменной типа byte присваивается переменной типа short

        i = b; // значение переменной типа byte присваивается переменной типа int
        i = s; // значение переменной типа short присваивается переменной типа int
        i = c; // значение переменной типа char присваивается переменной типа int

        l = b; // значение переменной типа byte присваивается переменной типа long
        l = s; // значение переменной типа short присваивается переменной типа long
        l = i; // значение переменной типа int присваивается переменной типа long
        l = c; // значение переменной типа char присваивается переменной типа long

        f = b; // значение переменной типа byte присваивается переменной типа float
        f = s; // значение переменной типа short присваивается переменной типа float
        f = i; // значение переменной типа int присваивается переменной типа float
        f = l; // значение переменной типа long присваивается переменной типа float
        f = c; // значение переменной типа char присваивается переменной типа float

        d = b; // значение переменной типа byte присваивается переменной типа double
        d = s; // значение переменной типа short присваивается переменной типа double
        d = i; // значение переменной типа int присваивается переменной типа double
        d = l; // значение переменной типа long присваивается переменной типа double
        d = c; // значение переменной типа char присваивается переменной типа double
        d = f; // значение переменной типа float присваивается переменной типа double

        /*---------------------------------------------------------------------*/

        /* приведение типов*/

        b = (byte) s; // значение переменной типа short присваивается переменной типа byte
        b = (byte) i; // значение переменной типа int присваивается переменной типа byte
        b = (byte) l; // значение переменной типа long присваивается переменной типа byte
        b = (byte) f; // значение переменной типа float присваивается переменной типа byte
        b = (byte) d; // значение переменной типа double присваивается переменной типа byte
        b = (byte) c; // значение переменной типа char присваивается переменной типа byte

        s = (short) i; // значение переменной типа int присваивается переменной типа short
        s = (short) l; // значение переменной типа long присваивается переменной типа short
        s = (short) f; // значение переменной типа float присваивается переменной типа short
        s = (short) d; // значение переменной типа double присваивается переменной типа short
        s = (short) c; // значение переменной типа char присваивается переменной типа short

        i = (int)l; // значение переменной типа long присваивается переменной типа int
        i = (int)f; // значение переменной типа float присваивается переменной типа int
        i = (int)d; // значение переменной типа double присваивается переменной типа int

        l = (long)f; // значение переменной типа float присваивается переменной типа long
        l = (long)d; // значение переменной типа double присваивается переменной типа long

        f = (float) d; // значение переменной типа double присваивается переменной типа float

        c = (char) b; // значение переменной типа byte присваивается переменной типа char
        c = (char) s; // значение переменной типа short присваивается переменной типа char
        c = (char) i; // значение переменной типа int присваивается переменной типа char
        c = (char) l; // значение переменной типа long присваивается переменной типа char
        c = (char) f; // значение переменной типа float присваивается переменной типа char
        c = (char) d; // значение переменной типа double присваивается переменной типа char

        /*---------------------------------------------------------------------*/

        double doubleNum1 = 3.14;
        /* усечение значения переменной вещественного типа*/
        int intNum1 = (int)doubleNum1;
        System.out.println(intNum1+" = "+doubleNum1);

        double doubleNum2 = 4294967296.14;
        /* деление по модулю значения переменной, чей диапазон превышает допустимый*/
        int intNum2 = (int)doubleNum2;
        System.out.println(intNum2+" = "+doubleNum2);

        /* деление по модулю значения переменной, чей диапазон превышает допустимый*/
        int intNum3 = 257;
        byte bNum = (byte)intNum3;
        System.out.println(bNum+" = "+intNum3);
    }

    /*---------------------------------------------------------------------*/

    /* 5) автоматическое преобразование в выражениях*/

    void exampleMethod5(){
        byte b = 1;
        short s = 2;
        int i = 3;
        long l = 4;
        char c = 5;
        float f = 6.0f;
        double d = 7.0;

        /* типы byte, short и char автоматически продвигаются к типу int*/
        //b = b * b; // ошибка
        i = b * b;
        //s = s * s; // ошибка
        i = s * s;
        //c = c * c; // ошибка
        i = c * c;

        /* типы byte, short, int и char автоматически продвигаются к типу long*/
        l = b * b;
        l = s * s;
        l = i * i;
        l = c * c;

        /* типы byte, short, int, long и char автоматически продвигаются к типу float*/
        f = b * b;
        f = s * s;
        f = i * i;
        f = l * l;
        f = c * c;

        /* типы byte, short, int, long, char и float автоматически продвигаются к типу double*/
        d = b * b;
        d = s * s;
        d = i * i;
        d = l * l;
        d = c * c;
        d = f * f;

        /* Если известно, что результат вычисления выражения не будет превышать допустимый диапазон значения
         * типа byte, short или char, то можно использовать явное приведение типа*/
        b = (byte)(b * b);
        s = (short)(s * s);
        c = (char) (c * c);
    }

    /*---------------------------------------------------------------------*/

    /* 6) продвижение типов в выражениях*/

    void exampleMethod6(){
        byte b = 1;
        short s = 2;
        int i = 3; // приоритет типа int выше, чем у типов byte, short и char
        long l = 4; // приоритет типа long выше, чем у типов byte, short, char и int
        char c = 5;
        float f = 6.0f; // приоиртет типа float выше, чем у всех целочисленных типов, включая тип char
        double d = 7.0; // приоиртет типа double выше, чем у всех других типов

        /* При продвижении типов в выражениях применяется ряд правил:
         * - если в выражении имеются значения типа byte, short и/или char, то они (сначало) продвигаются к типу int
         * (как указывалось ранее)
         * - (затем), если в выражении есть хотя бы один операнд типа long, то тип всего выражения продвигается
         * к его типу
         * - (далее), если в выражении есть хотя бы один операнд типа float, то тип всего выражения продвигается
         * к его типу
         * - (и в конечном итоге), если в выражении есть хотя бы один операнд типа double, то тип всего выражения
         * продвигается к его типу и присваивается переменной того же типа, т.е. double*/
        d =  (f * s)   +  (i * c)  +   (d * l)    +   (l * b);
        // (тип float) + (тип int) + (тип double) +  (тип long)
    }

    public static void main(String[] args) {
        Variables variables = new Variables();
        variables.exampleMethodV1();
        variables.exampleMethodV2();
        variables.exampleMethodV2a();
        variables.exampleMethod3();
        variables.exampleMethod4();
        variables.exampleMethod5();
        variables.exampleMethod6();
    }
}
